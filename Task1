# CODETECH-Task1
/*AND_GATE*/
module and_gate_s(a,b,y);
input a,b;
output y;
endmodule

/* AND Test_bench*/
module and_gate_tb;
reg a,b;
wire y;

and_gate_s uut(a,b,y);

initial begin
a = 0; b = 0;
#10
b = 0; b = 1;
#10
a = 1; b = 0;
#10
b = 1; b = 1;
#10
$finish();
end
                
endmodule

/*OR_GATE*/

module or_gate(a,b,y);
input a,b;
output y;

or(y,a,b);
                
endmodule

module or_gate_tb;
reg a,b;
wire y;

or_gate uut(a,b,y);

initial begin
a = 0; b = 0;
#10
b = 0; b = 1;
#10
a = 1; b = 0;
#10
b = 1; b = 1;
#10
$finish();
end
                
endmodule

/*NAND_GATE*/
module NAND_gate (
    input A,
    input B,
    output Y
);
    assign Y = ~(A & B);
endmodule


module NAND_gate_tb;

    
    reg A;
    reg B;
    wire Y;

        NAND_gate uut (
        .A(A),
        .B(B),
        .Y(Y)
    );

    
    initial begin
        
        A = 0; B = 0; #10;
        

        A = 0; B = 1; #10;
       
        A = 1; B = 0; #10;
        
        A = 1; B = 1; #10;
        $finish;
    end
endmodule

/*NOT_GATE*/
module not_gate(
    input wire A,    
    output wire Y    
);

assign Y = ~A;  

endmodule

module tb_not_gate;


reg A;          
wire Y;         

not_gate uut (
    .A(A), 
    .Y(Y)
);

initial begin
    
    A = 0;
    #10;         
    A = 1;
    #10;         
end

initial begin
    
    $monitor("Time: %0d, A = %b, Y = %b", $time, A, Y);
end

endmodule
/*XN0R_GATE*/
module xnor_gate (
    input wire A,
    input wire B,
    output wire Y
);

    assign Y = ~(A ^ B);

endmodule

module tb_xnor_gate;

    // Inputs
    reg A;
    reg B;

    // Output
    wire Y;

    
    xnor_gate uut (
        .A(A), 
        .B(B), 
        .Y(Y)
    );

    initial begin
        
        A = 0; B = 0;
        #10; 
        
        A = 0; B = 1;
        #10;

        A = 1; B = 0;
        #10;

        A = 1; B = 1;
        #10;

      
        $finish;
    end
    
    initial begin
        $monitor("At time %0d: A = %b, B = %b, Y = %b", $time, A, B, Y);
    end

endmodule

/*NOR_GATE*/
module NOR_Gate (
    input A,
    input B,
    output Y
);
assign Y = ~(A | B);
endmodule
/nor testbench/
module tb_NOR_Gate;
reg A;
reg B;
wire Y;
NOR_Gate uut (
    .A(A), 
    .B(B), 
    .Y(Y)
);

initial begin
    A = 0; B = 0;
    #10;
    A = 0; B = 1;
    #10;
    A = 1; B = 0;
    #10;
    A = 1; B = 1;
    #10;
    $stop;
end
endmodule

/*XOR_GATE*/
module xor_gate (
    input wire a,   
    input wire b,    
    output wire y    
);
  assign y = a ^ b;
endmodule


module tb_xor_gate;

   
    reg a;
    reg b;
    wire y;

    xor_gate uut (
        .a(a), 
        .b(b), 
        .y(y)
    );

    initial begin
        
        $monitor("a = %b, b = %b, y = %b", a, b, y);

        
        a = 0; b = 0;
        #10;
        a = 0; b = 1;
        #10;

        a = 1; b = 0;
        #10;

        a = 1; b = 1;
        #10;

        $finish;
    end

endmodule

/*2-BIT_ADDER*/
module two_bit_adder (
    input [1:0] A,  
    input [1:0] B,  
    output [2:0] SUM 
);

    assign SUM = A + B;
endmodule


module tb_two_bit_adder;

    
    reg [1:0] A;
    reg [1:0] B;

    
    wire [2:0] SUM;

    
    two_bit_adder uut (
        .A(A),
        .B(B),
        .SUM(SUM)
    );

    initial begin
        A = 2'b00; B = 2'b00;
        #10;
        A = 2'b01; B = 2'b01;
        #10;
        A = 2'b10; B = 2'b10;
        #10;
        A = 2'b11; B = 2'b11;
        #10;
        $finish;
    end

    initial begin
        $monitor("Time = %0t | A = %b | B = %b | SUM = %b", $time, A, B, SUM);
    end

endmodule
/*multiplier_2x1*/
module multiplier2x1 (
    input [1:0] A, 
    input [1:0] B, 
    output [3:0] Y  
);

assign Y = A * B;

endmodule

module tb_multiplier2x1;
reg [1:0] A;
reg [1:0] B;
wire [3:0] Y;
multiplier2x1 uut (
    .A(A),
    .B(B),
    .Y(Y)
);

initial begin
    A = 2'b10;
    B = 2'b10;
    #10;
    A = 2'b11;
    B = 2'b01;
    #10;
    A = 2'b00;
    B = 2'b01;
    #10;
    
    A = 2'b01;
    B = 2'b01;
    #10;
    
    A = 2'b10;
    B = 2'b11;
    #10;
   
    A = 2'b11;
    B = 2'b11;
    #10
    $stop;
end

endmodule
